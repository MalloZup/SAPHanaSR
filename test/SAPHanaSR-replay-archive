#!/bin/bash
#
##########################################################################
#
# SAPHanaSR-replay
#
# Author:       Fabian Herschel, November 2015
# Support:      linux@sap.com
# License:      GNU General Public License (GPL)
# Copyright (c) 2014-2016 SUSE Linux GmbH, Nuernberg, Germany.
# Copyright (c) 2017-2019 SUSE LLC.
#
##########################################################################
#
# Syntax: 
# SAPHanaSR-replay-archive <path-to-pengine-archive> (tar.bz2)
#
# SAPHanaSR-replay-archive archive-containing-some-pengine-directories
#
##########################################################################
#
# version: 1.0
#
archive="$1"
mkdir -p "${archive}-tmp"
tar -xjf "$archive" -C "${archive}-tmp"
cd "${archive}-tmp"
#
####################
#
# find pengine directories
#
pDirs=$(find . -type d -name pengine)

#
####################
#
# find all pengine inputs sorted by time
#
pFiles=$(find $pDirs -name '*input*')
pFilesSorted=$(ls -tr $pFiles)

#
####################
#
# find all cib.txt files
#
cFiles=$(find . -type f -name cib.txt)

#
####################
#
# find all SIDs mentioned in the cib.txt
#
sids=$(
for cF in $cFiles; do
    while read line 
    do
        if [[ "$line" =~ :suse:SAPHanaTopology ]] ; then
           if [[ "$line" =~ SID=(...) ]]; then
               echo "${BASH_REMATCH[1]}"
           fi
        fi
    done < "$cF"
done | sort -u | tr '[:upper:]' '[:lower:]' )

#
####################
#
# create a tmp directory to extract pengine files
#
mkdir -p "${archive}-tmp/tmp"

#
####################
#
# for all sids process all pengine files and show the hana attributes
#
for sid in $sids; do
    echo "================ replay for sid $sid ==============="
    for cibBZ2 in $pFilesSorted; do 
       cib="${cibBZ2%.bz2}"; 
       shortCIB="${cib##*/}"
       echo "cib: $cib"; 
       bunzip2 -c "$cibBZ2" > "${archive}-tmp/tmp/$shortCIB"; 
       /usr/sbin/SAPHanaSR-showAttr --cib="${archive}-tmp/tmp/$shortCIB" --sid="$sid";
       rm "${archive}-tmp/tmp/$shortCIB" ;    
    done 
done
