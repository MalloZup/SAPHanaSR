#!/bin/bash
set -u

   sid="lnx"
   Nodes=$(crm_node -l | awk '$3 == "member" { print $2 }' )
#   node1="lv9041"
#   node2="lv9042"

format="%-10s %10s %-23s %-6s %-8s %-6s %-6s\n"

#
# TODO: add parameter handling later ;-)
#
while [ $# -gt 0 ]; do
    case $1 in 
        -1 )
            ;;
        --sid )
            sid=$(echo "$2" | tr [[:upper:]] [[:lower:]])
            shift
            ;;
    esac
    shift
done

function print_header()
{
   local node=$1 node_lpt=$2 node_sync=$3 node_state=$4 age=$5 promo=$6
   local node_time

   node_time="lpt"
   printf "$format" "$node" "$node_lpt" "$node_time" "$node_sync" "$node_state" "$age" "$promo"
}


function print_node()
{
   local node=$1 node_lpt=${2:--1} node_sync=$3 node_state=$4 age=$5 promo=$6
   local node_time

   if [ $node_lpt -gt 3600 ]; then
      node_time=$(date --d @$node_lpt +'%Y-%m-%d %T %Z')
   else
      node_time="--"
   fi
   printf "$format" "$node" "$node_lpt" "$node_time" "$node_sync" "$node_state" "$age" "$promo"
}

function get_and_print_node()
{
   local node=$1
   node_lpt=$(crm_attribute -N $node -G -n  lpa_${sid}_lpt -l reboot -q 2>/dev/null)
#echo "crm_attribute -N $node -G -n  lpa_${sid}_lpt -l reboot -q" >&2
   node_sync=$(crm_attribute -N $node -G -n  hana_${sid}_sync_state -l reboot -q 2>/dev/null)
   node_state=$(crm_attribute -N $node -G -n  hana_${sid}_clone_state -l reboot -q 2>/dev/null)
   node_promo=$(ptest -sL 2>/dev/null | awk '$0 ~ "promotion score on "  h {print $6}' h=$node 2>/dev/null)

   node_lpt=${node_lpt:--1}
   if [ $node_lpt -gt 3600 ]; then
	   node_time=$(date -d @$node_lpt)
       (( node_age = currtime - node_lpt ))
   else
           node_time=""
           node_age="-"
   fi
   ANodes[$count]="$node"
   ALpt[$count]="$node_lpt"
   print_node "$node" "$node_lpt" "$node_sync" "$node_state" "$node_age" "$node_promo"
}

function lpa_check_lpt_status() {
    local rc=0
    local LPT0=${ALpt[0]}
    local LPT1=${ALpt[1]}
    local LPTDiff=0
    #
    # TODO: Implement lpa_check_lpt_status
    #
        #
        # TODO: Maye LPA should also say win, if lpa-loc=2 and lpa-rem=1 (as special init case)
        #
        # TODO: We might need to fetch DUPLICATE_PRIMARY_TIMEOUT from the resource / lets
        #       for first try default here
        DUPLICATE_PRIMARY_TIMEOUT=7200
        (( LPTDiff0 = LPT0 - LPT1 ))
        (( LPTDiff1 = LPT1 - LPT0 ))
## BAUSTELLE
        if [ $LPTDiff0 -gt $DUPLICATE_PRIMARY_TIMEOUT ]; then
            # We are the winner - LPA says STARTUP
            rc=0
        elif [ $LPTDiff1 -gt $DUPLICATE_PRIMARY_TIMEOUT ]; then
            # The other one has won - LPA says REGISTER
            rc=1
        else
            if [ $LPT0 -eq 1 ]; then
                # TODO: Do we need to differ between a 1=1 with different sync status?
                # This case can happen: a) when really to secondaries would in the cluster 
                #                       b) when a primary failed and restarts with prefrred remote takeover 
                #                        
                rc=2
            else
                # THIS IS A STALEMATE, WHICH COULD HAPPEN
                # TODO: CHeck, if FAIL is the correct behaviour - or just wait for admin to decide via attribute?
                rc=2
            fi
        fi
    return $rc
}


   currtime=$(date +'%s')
   dc=$(crmadmin -q -D 2>/dev/null )
   if [ $? -eq 0 ]; then
      s_state="----"
   else
      s_state=$(crmadmin -q -S $dc 2>/dev/null)
   fi
   echo "Last Primary Arbitration (LPA) Algorithm"
   echo "Time: $(date -d @$currtime +'%Y-%m-%d %T %Z') Cluster-Status: $s_state"
   print_header "Node" "lpt" "sync" "rcstat" "age" "promo"

   count=0
   for myNode in $Nodes; do
       get_and_print_node $myNode
       (( count++ ))
   done

   lpa_check_lpt_status; rc=$?
   case "$rc" in
       0 )
          echo "==> ${ANodes[0]} wins LPA"
           ;;
       1 )
          echo "==> ${ANodes[1]} wins LPA"
           ;;
       2 )
          echo "==> ${ANodes[0]} / ${ANodes[1]} LPA stalemate"
           ;;
       * )
          echo "==> LPA FAILURE!!"
           ;;
   esac

